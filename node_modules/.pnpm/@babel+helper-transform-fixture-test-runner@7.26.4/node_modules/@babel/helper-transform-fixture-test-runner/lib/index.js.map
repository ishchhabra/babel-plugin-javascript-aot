{"version":3,"names":["_core","require","babel","_helperFixtures","_codeFrame","helpers","_sourceMapVisualizer","_assert","_fs","_interopRequireWildcard","_path","_vm","_lruCache","_url","_jestDiff","_child_process","_os","_fsReaddirRecursive","_module","_helperCheckDuplicateNodes","_crypto","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","asyncGeneratorStep","o","c","value","done","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","dirname","path","__filename","assert","rejects","block","validateError","reject","Error","error","EXTERNAL_HELPERS_VERSION","cachedScripts","LruCache","max","contextModuleCache","transformWithoutConfigFile","code","opts","transformSync","assign","configFile","babelrc","transformAsyncWithoutConfigFile","transformAsync","createTestContext","context","vm","createContext","process","transform","setTimeout","setImmediate","expect","global","moduleCache","create","runCacheableScriptInTestContext","join","buildExternalHelpers","filename","srcFn","cached","cachedData","undefined","script","Script","lineOffset","produceCachedData","cachedDataProduced","module","id","exports","req","runModuleInTestContext","runInContext","relativeFilename","v","w","split","versions","node","paths","b","M","f","_findPath","_nodeModulePaths","concat","fs","readFileSync","sharedTestContext","runCodeInTestContext","_sharedTestContext","oldCwd","cwd","chdir","src","displayErrors","maybeMockConsole","_x3","_x4","_maybeMockConsole","validateLogs","run","actualLogs","stdout","stderr","result","spy1","jest","spyOn","console","mockImplementation","msg","spy2","mockRestore","_x5","_run","task","actual","expected","exec","options","doNotSetSourceType","optionsDir","ignoreOutput","getOpts","self","newOpts","ast","loc","filenameRelative","sourceFileName","sourceType","inputSourceMap","resolveOptionPluginOrPreset","execCode","resultExec","execErr","execOpts","checkDuplicateNodes","err","message","codeFrameColumns","inputCode","expectedCode","outputCode","normalizeOutput","normalizePathSeparator","throws","statSync","isDirectory","env","CI","expectedFile","replace","log","writeFileSync","unlinkSync","_","validateFile","toMatch","normalizationOpts","normalizePresetEnvDebug","taskDir","includes","validateSourceMapVisual","visual","visualizeSourceMap","map","toEqual","sourceMapVisual","_task$sourceMapVisual","OVERWRITE","sourceMaps","sourceMap","_task$sourceMapFile","_task$sourceMapFile$l","sourceMapFile","JSON","stringify","actualCode","expectedLoc","diff","expand","escapeRegExp","string","dir","symbol","trim","RegExp","platform","parseInt","_default","fixturesLoc","name","suiteOpts","taskOpts","dynamicOpts","suites","getFixtures","testSuite","_suiteOpts$ignoreSuit","ignoreSuites","title","describe","tests","_suiteOpts$ignoreTask","_suiteOpts$ignoreTask2","ignoreTasks","testFn","disabled","it","skip","testTitle","runTask","externalHelpers","_task$options","_task$options$plugins","plugins","push","helperVersion","throwMsg","ok","nodeGte8","tmpDir","realpathSync","os","tmpdir","readDir","pathFilter","files","existsSync","readdirRecursive","forEach","readFile","outputFileSync","filePath","data","mkdirSync","sync","recursive","deleteDir","rmSync","d","p","readdirSync","lstatSync","rmdirSync","force","x","basename","assertTest","ipcMessage","expectStderr","stderrContains","toContain","toBe","stderrPath","expectStdout","stdoutContains","stdoutPath","ipc","outFiles","actualFiles","keys","inFiles","testLoc","toHaveProperty","buildParallelProcessTests","curr","total","sliceLength","Math","ceil","length","sliceStart","sliceEnd","testsSlice","slice","test","suiteName","testName","fn","buildProcessTests","beforeHook","afterHook","startsWith","suiteLoc","args","optionsLoc","parse","Array","isArray","executorLoc","executor","key","babelrcLoc","babelIgnoreLoc","noBabelrc","minNodeVersion","BABEL_8_BREAKING","callback","tmpLoc","createHash","update","digest","binLoc","FORCE_COLOR","NODE_OPTIONS","child","spawn","execPath","stdio","on","arg","stdin","write","end","captureOutput","proc","chunk","pipe","send","kill","sort","testA","testB","nameA","nameB","localeCompare"],"sources":["../src/index.ts"],"sourcesContent":["/* eslint-env jest */\nimport * as babel from \"@babel/core\";\nimport {\n  buildExternalHelpers,\n  type InputOptions,\n  type FileResult,\n} from \"@babel/core\";\nimport {\n  default as getFixtures,\n  resolveOptionPluginOrPreset,\n  readFile,\n  type Test,\n  type TestFile,\n  type TaskOptions,\n} from \"@babel/helper-fixtures\";\nimport { codeFrameColumns } from \"@babel/code-frame\";\nimport * as helpers from \"./helpers.ts\";\nimport visualizeSourceMap from \"./source-map-visualizer.ts\";\nimport assert from \"assert\";\nimport fs, { readFileSync, realpathSync } from \"fs\";\nimport path from \"path\";\nimport vm from \"vm\";\nimport LruCache from \"lru-cache\";\nimport { fileURLToPath } from \"url\";\nimport { diff } from \"jest-diff\";\nimport type { ChildProcess } from \"child_process\";\nimport { spawn } from \"child_process\";\nimport os from \"os\";\nimport readdirRecursive from \"fs-readdir-recursive\";\n\nimport { createRequire } from \"module\";\nconst require = createRequire(import.meta.url);\nconst dirname = path.dirname(fileURLToPath(import.meta.url));\n\nimport checkDuplicateNodes from \"@babel/helper-check-duplicate-nodes\";\nimport { createHash } from \"crypto\";\n\ntype Module = {\n  id: string;\n  exports: Record<string, unknown>;\n};\n\nif (!process.env.BABEL_8_BREAKING) {\n  // Introduced in Node.js 10\n  if (!assert.rejects) {\n    assert.rejects = async function (block, validateError) {\n      try {\n        await (typeof block === \"function\" ? block() : block);\n        return Promise.reject(new Error(\"Promise not rejected\"));\n      } catch (error) {\n        // @ts-expect-error Fixme: validateError can be a string | object\n        // see https://nodejs.org/api/assert.html#assertrejectsasyncfn-error-message\n        if (typeof validateError === \"function\" && !validateError(error)) {\n          return Promise.reject(\n            new Error(\"Promise rejected with invalid error\"),\n          );\n        }\n      }\n    };\n  }\n}\n\nconst EXTERNAL_HELPERS_VERSION = \"7.100.0\";\n\nconst cachedScripts = new LruCache<\n  string,\n  { code: string; cachedData?: Buffer }\n>({ max: 10 });\nconst contextModuleCache = new WeakMap();\n\n// We never want our tests to accidentally load the root\n// babel.config.js file, so we disable config loading by\n// default. Tests can still set `configFile: true | string`\n// to re-enable config loading.\nfunction transformWithoutConfigFile(code: string, opts: InputOptions) {\n  return babel.transformSync(code, {\n    configFile: false,\n    babelrc: false,\n    ...opts,\n  });\n}\nfunction transformAsyncWithoutConfigFile(code: string, opts: InputOptions) {\n  return babel.transformAsync(code, {\n    configFile: false,\n    babelrc: false,\n    ...opts,\n  });\n}\n\nexport function createTestContext() {\n  const context = vm.createContext({\n    ...helpers,\n    process: process,\n    transform: transformWithoutConfigFile,\n    transformAsync: transformAsyncWithoutConfigFile,\n    setTimeout: setTimeout,\n    setImmediate: setImmediate,\n    expect,\n  });\n  context.global = context;\n\n  const moduleCache = Object.create(null);\n  contextModuleCache.set(context, moduleCache);\n\n  // Populate the \"babelHelpers\" global with Babel's helper utilities.\n  runCacheableScriptInTestContext(\n    path.join(\n      path.dirname(fileURLToPath(import.meta.url)),\n      \"babel-helpers-in-memory.js\",\n    ),\n    buildExternalHelpers,\n    context,\n    moduleCache,\n  );\n\n  return context;\n}\n\nfunction runCacheableScriptInTestContext(\n  filename: string,\n  srcFn: () => string,\n  context: vm.Context,\n  moduleCache: any,\n): Module {\n  let cached = cachedScripts.get(filename);\n  if (!cached) {\n    const code = `(function (exports, require, module, __filename, __dirname) {\\n${srcFn()}\\n});`;\n    cached = {\n      code,\n      cachedData: undefined,\n    };\n    cachedScripts.set(filename, cached);\n  }\n\n  let script: vm.Script;\n  if (process.env.BABEL_8_BREAKING) {\n    script = new vm.Script(cached.code, {\n      filename,\n      lineOffset: -1,\n      cachedData: cached.cachedData,\n    });\n    cached.cachedData = script.createCachedData();\n  } else {\n    script = new vm.Script(cached.code, {\n      filename,\n      lineOffset: -1,\n      cachedData: cached.cachedData,\n      produceCachedData: true,\n    });\n    if (script.cachedDataProduced) {\n      cached.cachedData = script.cachedData;\n    }\n  }\n\n  const module = {\n    id: filename,\n    exports: {},\n  };\n  moduleCache[filename] = module;\n\n  const req = (id: string) =>\n    runModuleInTestContext(id, filename, context, moduleCache);\n  const dirname = path.dirname(filename);\n\n  script\n    .runInContext(context)\n    .call(module.exports, module.exports, req, module, filename, dirname);\n\n  return module;\n}\n\n/**\n * A basic implementation of CommonJS so we can execute `@babel/polyfill` inside our test context.\n * This allows us to run our unittests\n */\nfunction runModuleInTestContext(\n  id: string,\n  relativeFilename: string,\n  context: vm.Context,\n  moduleCache: any,\n) {\n  const filename = require.resolve(id, {\n    paths: [path.dirname(relativeFilename)],\n  });\n\n  // Expose Node-internal modules if the tests want them. Note, this will not execute inside\n  // the context's global scope.\n  if (filename === id) return require(id);\n\n  // Modules can only evaluate once per context, so the moduleCache is a\n  // stronger cache guarantee than the LRU's Script cache.\n  if (moduleCache[filename]) return moduleCache[filename].exports;\n\n  return runCacheableScriptInTestContext(\n    filename,\n    () => fs.readFileSync(filename, \"utf8\"),\n    context,\n    moduleCache,\n  ).exports;\n}\n\nlet sharedTestContext: vm.Context;\n\n/**\n * Run the given snippet of code inside a CommonJS module.\n *\n * Exposed for unit tests, not for use as an API.\n */\nexport function runCodeInTestContext(\n  code: string,\n  opts: {\n    filename: string;\n  },\n  context = (sharedTestContext ??= createTestContext()),\n) {\n  const filename = opts.filename;\n  const dirname = path.dirname(filename);\n  const moduleCache = contextModuleCache.get(context);\n  const req = (id: string) =>\n    runModuleInTestContext(id, filename, context, moduleCache);\n\n  const module: Module = {\n    id: filename,\n    exports: {},\n  };\n\n  const oldCwd = process.cwd();\n  try {\n    if (opts.filename) process.chdir(path.dirname(opts.filename));\n\n    // Expose the test options as \"opts\", but otherwise run the test in a CommonJS-like environment.\n    // Note: This isn't doing .call(module.exports, ...) because some of our tests currently\n    // rely on 'this === global'.\n    const src = `(function(exports, require, module, __filename, __dirname, opts) {\\n${code}\\n});`;\n    return vm.runInContext(src, context, {\n      filename,\n      displayErrors: true,\n      lineOffset: -1,\n    })(module.exports, req, module, filename, dirname, opts);\n  } finally {\n    process.chdir(oldCwd);\n  }\n}\n\nasync function maybeMockConsole<R>(\n  validateLogs: boolean,\n  run: () => Promise<R>,\n) {\n  const actualLogs = { stdout: \"\", stderr: \"\" };\n\n  if (!validateLogs) return { result: await run(), actualLogs };\n\n  const spy1 = jest.spyOn(console, \"log\").mockImplementation(msg => {\n    actualLogs.stdout += `${msg}\\n`;\n  });\n  const spy2 = jest.spyOn(console, \"warn\").mockImplementation(msg => {\n    actualLogs.stderr += `${msg}\\n`;\n  });\n\n  try {\n    return { result: await run(), actualLogs };\n  } finally {\n    spy1.mockRestore();\n    spy2.mockRestore();\n  }\n}\n\nasync function run(task: Test) {\n  const {\n    actual,\n    expect: expected,\n    exec,\n    options: opts,\n    doNotSetSourceType,\n    optionsDir,\n    validateLogs,\n    ignoreOutput,\n    stdout,\n    stderr,\n  } = task;\n\n  // todo(flow->ts) add proper return type (added any, because empty object is inferred)\n  function getOpts(self: TestFile): any {\n    const newOpts = {\n      ast: true,\n      cwd: path.dirname(self.loc),\n      filename: self.loc,\n      filenameRelative: self.filename,\n      sourceFileName: self.filename,\n      ...(doNotSetSourceType ? {} : { sourceType: \"script\" }),\n      babelrc: false,\n      configFile: false,\n      inputSourceMap: task.inputSourceMap || undefined,\n      ...opts,\n    };\n\n    return resolveOptionPluginOrPreset(newOpts, optionsDir);\n  }\n\n  let execCode = exec.code;\n  let result: FileResult;\n  let resultExec;\n\n  let execErr: Error;\n\n  if (execCode) {\n    const context = createTestContext();\n    const execOpts = getOpts(exec);\n\n    // Ignore Babel logs of exec.js files.\n    // They will be validated in input/output files.\n    ({ result } = await maybeMockConsole(validateLogs, () =>\n      babel.transformAsync(execCode, execOpts),\n    ));\n\n    checkDuplicateNodes(result.ast);\n    execCode = result.code;\n\n    try {\n      resultExec = runCodeInTestContext(execCode, execOpts, context);\n    } catch (err) {\n      // Pass empty location to include the whole file in the output.\n      if (typeof err === \"object\" && err.message) {\n        err.message =\n          `${exec.loc}: ${err.message}\\n` +\n          codeFrameColumns(execCode, {} as any);\n      }\n\n      execErr = err;\n    }\n  }\n\n  const inputCode = actual.code;\n  const expectedCode = expected.code;\n  if (!execCode || inputCode) {\n    let actualLogs;\n\n    ({ result, actualLogs } = await maybeMockConsole(validateLogs, () =>\n      babel.transformAsync(inputCode, getOpts(actual)),\n    ));\n\n    const outputCode = normalizeOutput(result.code, {\n      normalizePathSeparator: true,\n    });\n\n    checkDuplicateNodes(result.ast);\n    if (!ignoreOutput) {\n      if (\n        !expected.code &&\n        outputCode &&\n        !opts.throws &&\n        fs.statSync(path.dirname(expected.loc)).isDirectory() &&\n        !process.env.CI\n      ) {\n        const expectedFile = expected.loc.replace(\n          /\\.m?js$/,\n          result.sourceType === \"module\" ? \".mjs\" : \".js\",\n        );\n\n        console.log(`New test file created: ${expectedFile}`);\n        fs.writeFileSync(expectedFile, `${outputCode}\\n`);\n\n        if (expected.loc !== expectedFile) {\n          try {\n            fs.unlinkSync(expected.loc);\n          } catch (_) {}\n        }\n      } else {\n        validateFile(outputCode, expected.loc, expectedCode);\n\n        if (inputCode) {\n          expect(expected.loc).toMatch(\n            result.sourceType === \"module\" ? /\\.mjs$/ : /\\.js$/,\n          );\n        }\n      }\n    }\n\n    if (validateLogs) {\n      const normalizationOpts = {\n        normalizePathSeparator: true,\n        normalizePresetEnvDebug: task.taskDir.includes(\"babel-preset-env\"),\n      };\n\n      validateFile(\n        normalizeOutput(actualLogs.stdout, normalizationOpts),\n        stdout.loc,\n        process.env.BABEL_8_BREAKING\n          ? // In Babel 8, preset-env does not enable all the unnecessary syntax\n            // plugins. For simplicity, just strip them fro the expected output\n            // so that we do not need to separate tests for every fixture.\n            stdout.code.replace(\n              /\\n\\s*syntax-(?!import-attributes|import-assertions).*/g,\n              \"\",\n            )\n          : stdout.code,\n      );\n      validateFile(\n        normalizeOutput(actualLogs.stderr, normalizationOpts),\n        stderr.loc,\n        stderr.code,\n      );\n    }\n  }\n\n  if (execErr) {\n    throw execErr;\n  }\n\n  if (task.validateSourceMapVisual === true) {\n    const visual = visualizeSourceMap(result.code, result.map);\n    try {\n      expect(visual).toEqual(task.sourceMapVisual.code);\n    } catch (e) {\n      if (!process.env.OVERWRITE && task.sourceMapVisual.code) throw e;\n\n      console.log(`Updated test file: ${task.sourceMapVisual.loc}`);\n      fs.writeFileSync(\n        task.sourceMapVisual.loc ?? task.taskDir + \"/source-map-visual.txt\",\n        visual + \"\\n\",\n      );\n    }\n  }\n\n  if (opts.sourceMaps === true) {\n    try {\n      expect(result.map).toEqual(task.sourceMap);\n    } catch (e) {\n      if (!process.env.OVERWRITE && task.sourceMap) throw e;\n\n      task.sourceMapFile.loc ??= task.taskDir + \"/source-map.json\";\n\n      console.log(`Updated test file: ${task.sourceMapFile.loc}`);\n      fs.writeFileSync(\n        task.sourceMapFile.loc,\n        JSON.stringify(result.map, null, 2),\n      );\n    }\n  }\n\n  if (execCode && resultExec) {\n    return resultExec;\n  }\n}\n\nfunction validateFile(\n  actualCode: string,\n  expectedLoc: string,\n  expectedCode: string,\n) {\n  if (actualCode !== expectedCode) {\n    if (process.env.OVERWRITE) {\n      console.log(`Updated test file: ${expectedLoc}`);\n      fs.writeFileSync(expectedLoc, `${actualCode}\\n`);\n      return;\n    }\n\n    throw new Error(\n      `Expected ${expectedLoc} to match transform output.\\n` +\n        `To autogenerate a passing version of this file, delete ` +\n        ` the file and re-run the tests.\\n\\n` +\n        `Diff:\\n\\n${diff(expectedCode, actualCode, { expand: false })}`,\n    );\n  }\n}\n\nfunction escapeRegExp(string: string) {\n  return string.replace(/[|\\\\{}()[\\]^$+*?.]/g, \"\\\\$&\");\n}\n\nfunction normalizeOutput(\n  code: string,\n  { normalizePathSeparator = false, normalizePresetEnvDebug = false } = {},\n) {\n  const dir = path.resolve(\n    path.dirname(fileURLToPath(import.meta.url)),\n    \"../../../\",\n  );\n  const symbol = \"<CWD>\";\n  let result = code\n    .trim()\n    // (non-win32) /foo/babel/packages -> <CWD>/packages\n    // (win32) C:\\foo\\babel\\packages -> <CWD>\\packages\n    .replace(new RegExp(escapeRegExp(dir), \"g\"), symbol);\n  if (process.platform === \"win32\") {\n    result = result\n      // C:/foo/babel/packages -> <CWD>/packages\n      .replace(new RegExp(escapeRegExp(dir.replace(/\\\\/g, \"/\")), \"g\"), symbol)\n      // C:\\\\foo\\\\babel\\\\packages -> <CWD>\\\\packages (in js string literal)\n      .replace(\n        new RegExp(escapeRegExp(dir.replace(/\\\\/g, \"\\\\\\\\\")), \"g\"),\n        symbol,\n      );\n    if (normalizePathSeparator) {\n      result = result.replace(\n        new RegExp(`${escapeRegExp(symbol)}[\\\\w\\\\\\\\/.-]+`, \"g\"),\n        path => path.replace(/\\\\\\\\?/g, \"/\"),\n      );\n    }\n  }\n\n  if (!process.env.BABEL_8_BREAKING) {\n    // In Babel 8, preset-env logs transform- instead of proposal-. Manually rewrite\n    // the output logs so that we don't have to duplicate all the debug fixtures for\n    // the two different Babel versions.\n    if (normalizePresetEnvDebug) {\n      result = result.replace(/(\\s+)proposal-/g, \"$1transform-\");\n    }\n\n    // For some reasons, in older Node.js versions some symlinks are not properly\n    // resolved. The behavior is still ok, but we need to unify the output with\n    // newer Node.js versions.\n    if (parseInt(process.versions.node, 10) <= 8) {\n      result = result.replace(\n        /<CWD>\\/node_modules\\/@babel\\/runtime-corejs3/g,\n        \"<CWD>/packages/babel-runtime-corejs3\",\n      );\n    }\n  }\n\n  return result;\n}\n\nexport type SuiteOptions = {\n  ignoreSuites?: string[];\n  ignoreTasks?: string[];\n};\n\nexport default function (\n  fixturesLoc: string,\n  name: string,\n  suiteOpts: SuiteOptions = {},\n  taskOpts: TaskOptions = {},\n  dynamicOpts?: (options: TaskOptions, task: Test) => void,\n) {\n  const suites = getFixtures(fixturesLoc);\n\n  for (const testSuite of suites) {\n    if (suiteOpts.ignoreSuites?.includes(testSuite.title)) continue;\n\n    describe(name + \"/\" + testSuite.title, function () {\n      if (\n        !process.env.IS_PUBLISH &&\n        process.env.TEST_babel7plugins_babel8core\n      ) {\n        // Make sure that the ESM version of @babel/core is always loaded\n        // for babel7-8 interop tests.\n        // In `eval` so that it doesn't cause a syntax error when running\n        // tests in old Node.js.\n        beforeAll(() => eval('import(\"@babel/core\")').catch(console.error));\n      }\n\n      for (const task of testSuite.tests) {\n        if (\n          suiteOpts.ignoreTasks?.includes(task.title) ||\n          suiteOpts.ignoreTasks?.includes(testSuite.title + \"/\" + task.title)\n        ) {\n          continue;\n        }\n\n        const testFn = task.disabled ? it.skip : it;\n        const testTitle =\n          typeof task.disabled === \"string\"\n            ? `(SKIP: ${task.disabled}) ${task.title}`\n            : task.title;\n\n        testFn(\n          testTitle,\n\n          async function () {\n            const runTask = () => run(task);\n\n            if (\"sourceMap\" in task.options) {\n              throw new Error(\n                \"`sourceMap` option is deprecated. Use `sourceMaps` instead.\",\n              );\n            }\n\n            if (\"sourceMaps\" in task.options === false) {\n              task.options.sourceMaps = !!task.sourceMap;\n            }\n\n            Object.assign(task.options, taskOpts);\n\n            if (dynamicOpts) dynamicOpts(task.options, task);\n\n            if (task.externalHelpers) {\n              (task.options.plugins ??= [])\n                // @ts-expect-error manipulating input options\n                .push([\n                  \"external-helpers\",\n                  { helperVersion: EXTERNAL_HELPERS_VERSION },\n                ]);\n            }\n\n            const throwMsg = task.options.throws;\n            if (throwMsg) {\n              // internal api doesn't have this option but it's best not to pollute\n              // the options object with useless options\n              delete task.options.throws;\n\n              await assert.rejects(runTask, function (err: Error) {\n                assert.ok(\n                  throwMsg === true || err.message.includes(throwMsg),\n                  `\nExpected Error: ${throwMsg}\nActual Error: ${err.message}`,\n                );\n                return true;\n              });\n            } else {\n              return runTask();\n            }\n          },\n        );\n      }\n    });\n  }\n}\n\nexport type ProcessTestOpts = {\n  args: string[];\n  executor?: string;\n  ipc?: boolean;\n  ipcMessage?: string;\n  stdout?: string;\n  stderr?: string;\n  stdin?: string;\n  stdoutPath?: string;\n  stderrPath?: string;\n  stdoutContains?: boolean;\n  stderrContains?: boolean;\n  testLoc?: string;\n  outFiles?: Record<string, string>;\n  inFiles?: Record<string, string>;\n  noBabelrc?: boolean;\n  minNodeVersion?: number;\n  env?: Record<string, string>;\n  BABEL_8_BREAKING?: boolean;\n};\n\nexport type ProcessTest = {\n  suiteName: string;\n  testName: string;\n  skip: boolean;\n  fn: Function;\n  opts: ProcessTestOpts;\n  binLoc?: string;\n};\n\nexport type ProcessTestBeforeHook = (test: ProcessTest, tmpDir: string) => void;\nexport type ProcessTestAfterHook = (\n  test: ProcessTest,\n  tmpDir: string,\n  stdout: string,\n  stderr: string,\n) => {\n  stdout: string;\n  stderr: string;\n};\n\nconst nodeGte8 = parseInt(process.versions.node, 10) >= 8;\n\n// https://github.com/nodejs/node/issues/11422#issue-208189446\nconst tmpDir = realpathSync(os.tmpdir());\n\nconst readDir = function (loc: string, pathFilter: (arg0: string) => boolean) {\n  const files: Record<string, string> = {};\n  if (fs.existsSync(loc)) {\n    if (process.env.BABEL_8_BREAKING) {\n      fs.readdirSync(loc, { withFileTypes: true, recursive: true })\n        .filter(dirent => dirent.isFile() && pathFilter(dirent.name))\n        .forEach(dirent => {\n          const fullpath = path.join(dirent.parentPath, dirent.name);\n          files[path.relative(loc, fullpath)] = readFile(fullpath);\n        });\n    } else {\n      readdirRecursive(loc, pathFilter).forEach(function (filename) {\n        files[filename] = readFile(path.join(loc, filename));\n      });\n    }\n  }\n  return files;\n};\n\nconst outputFileSync = function (filePath: string, data: string) {\n  fs.mkdirSync(path.dirname(filePath), { recursive: true });\n  fs.writeFileSync(filePath, data);\n};\n\nfunction deleteDir(path: string): void {\n  fs.rmSync(path, { force: true, recursive: true });\n}\n\nconst pathFilter = function (x: string) {\n  return path.basename(x) !== \".DS_Store\";\n};\n\nconst assertTest = function (\n  stdout: string,\n  stderr: string,\n  ipcMessage: unknown,\n  opts: ProcessTestOpts,\n  tmpDir: string,\n) {\n  const expectStderr = opts.stderr.trim();\n  stderr = stderr.trim();\n\n  try {\n    if (opts.stderr) {\n      if (opts.stderrContains) {\n        expect(stderr).toContain(expectStderr);\n      } else {\n        expect(stderr).toBe(expectStderr);\n      }\n    } else if (stderr) {\n      throw new Error(\"stderr:\\n\" + stderr);\n    }\n  } catch (e) {\n    if (!process.env.OVERWRITE) throw e;\n    console.log(`Updated test file: ${opts.stderrPath}`);\n    outputFileSync(opts.stderrPath, stderr + \"\\n\");\n  }\n\n  const expectStdout = opts.stdout.trim();\n  stdout = stdout.trim();\n  stdout = stdout.replace(/\\\\/g, \"/\");\n\n  try {\n    if (opts.stdout) {\n      if (opts.stdoutContains) {\n        expect(stdout).toContain(expectStdout);\n      } else {\n        expect(stdout).toBe(expectStdout);\n      }\n    } else if (stdout) {\n      throw new Error(\"stdout:\\n\" + stdout);\n    }\n  } catch (e) {\n    if (!process.env.OVERWRITE) throw e;\n    console.log(`Updated test file: ${opts.stdoutPath}`);\n    outputFileSync(opts.stdoutPath, stdout + \"\\n\");\n  }\n\n  if (opts.ipc) {\n    expect(ipcMessage).toEqual(opts.ipcMessage);\n  }\n\n  if (opts.outFiles) {\n    const actualFiles = readDir(tmpDir, pathFilter);\n\n    Object.keys(actualFiles).forEach(function (filename) {\n      try {\n        if (\n          // saveInFiles always creates an empty .babelrc, so lets exclude for now\n          filename !== \".babelrc\" &&\n          filename !== \".babelignore\" &&\n          !Object.hasOwn(opts.inFiles, filename)\n        ) {\n          const expected = opts.outFiles[filename];\n          const actual = actualFiles[filename];\n\n          expect(actual).toBe(expected || \"\");\n        }\n      } catch (e) {\n        if (!process.env.OVERWRITE) {\n          e.message += \"\\n at \" + filename;\n          throw e;\n        }\n        const expectedLoc = path.join(opts.testLoc, \"out-files\", filename);\n        console.log(`Updated test file: ${expectedLoc}`);\n        outputFileSync(expectedLoc, actualFiles[filename]);\n      }\n    });\n\n    Object.keys(opts.outFiles).forEach(function (filename) {\n      expect(actualFiles).toHaveProperty([filename]);\n    });\n  }\n};\n\nexport function buildParallelProcessTests(name: string, tests: ProcessTest[]) {\n  return function (curr: number, total: number) {\n    const sliceLength = Math.ceil(tests.length / total);\n    const sliceStart = curr * sliceLength;\n    const sliceEnd = sliceStart + sliceLength;\n    const testsSlice = tests.slice(sliceStart, sliceEnd);\n\n    describe(`${name} [${curr}/${total}]`, function () {\n      it(\"dummy\", () => {});\n      for (const test of testsSlice) {\n        (test.skip ? it.skip : it)(\n          test.suiteName + \" \" + test.testName,\n          test.fn as any,\n        );\n      }\n    });\n  };\n}\n\nexport function buildProcessTests(\n  dir: string,\n  beforeHook: ProcessTestBeforeHook,\n  afterHook?: ProcessTestAfterHook,\n) {\n  const tests: ProcessTest[] = [];\n\n  fs.readdirSync(dir).forEach(function (suiteName) {\n    if (suiteName.startsWith(\".\") || suiteName === \"package.json\") return;\n\n    const suiteLoc = path.join(dir, suiteName);\n\n    fs.readdirSync(suiteLoc).forEach(function (testName) {\n      if (testName.startsWith(\".\")) return;\n\n      const testLoc = path.join(suiteLoc, testName);\n\n      let opts: ProcessTestOpts = {\n        args: [],\n      };\n\n      const optionsLoc = path.join(testLoc, \"options.json\");\n      if (fs.existsSync(optionsLoc)) {\n        const taskOpts = JSON.parse(readFileSync(optionsLoc, \"utf8\"));\n        if (taskOpts.os) {\n          let os = taskOpts.os;\n\n          if (!Array.isArray(os) && typeof os !== \"string\") {\n            throw new Error(\n              `'os' should be either string or string array: ${taskOpts.os}`,\n            );\n          }\n\n          if (typeof os === \"string\") {\n            os = [os];\n          }\n\n          if (!os.includes(process.platform)) {\n            return;\n          }\n\n          delete taskOpts.os;\n        }\n        opts = { args: [], ...taskOpts };\n      }\n\n      const executorLoc = path.join(testLoc, \"executor.js\");\n      if (fs.existsSync(executorLoc)) {\n        opts.executor = executorLoc;\n      }\n\n      opts.stderrPath = path.join(testLoc, \"stderr.txt\");\n      opts.stdoutPath = path.join(testLoc, \"stdout.txt\");\n      for (const key of [\"stdout\", \"stdin\", \"stderr\"] as const) {\n        const loc = path.join(testLoc, key + \".txt\");\n        if (fs.existsSync(loc)) {\n          opts[key] = readFile(loc);\n        } else {\n          opts[key] = opts[key] || \"\";\n        }\n      }\n\n      opts.testLoc = testLoc;\n      opts.outFiles = readDir(path.join(testLoc, \"out-files\"), pathFilter);\n      opts.inFiles = readDir(path.join(testLoc, \"in-files\"), pathFilter);\n\n      const babelrcLoc = path.join(testLoc, \".babelrc\");\n      const babelIgnoreLoc = path.join(testLoc, \".babelignore\");\n      if (fs.existsSync(babelrcLoc)) {\n        // copy .babelrc file to tmp directory\n        opts.inFiles[\".babelrc\"] = readFile(babelrcLoc);\n      } else if (!opts.noBabelrc) {\n        opts.inFiles[\".babelrc\"] = \"{}\";\n      }\n      if (fs.existsSync(babelIgnoreLoc)) {\n        // copy .babelignore file to tmp directory\n        opts.inFiles[\".babelignore\"] = readFile(babelIgnoreLoc);\n      }\n\n      const skip =\n        (opts.minNodeVersion &&\n          parseInt(process.versions.node, 10) < opts.minNodeVersion) ||\n        (process.env.BABEL_8_BREAKING\n          ? opts.BABEL_8_BREAKING === false\n          : opts.BABEL_8_BREAKING === true);\n\n      const test: ProcessTest = {\n        suiteName,\n        testName,\n        skip,\n        opts,\n        fn: function (callback: Function) {\n          const tmpLoc = path.join(\n            tmpDir,\n            \"babel-process-test\",\n            createHash(\"sha1\").update(testLoc).digest(\"hex\"),\n          );\n          deleteDir(tmpLoc);\n          fs.mkdirSync(tmpLoc, { recursive: true });\n\n          const { inFiles } = opts;\n          for (const filename of Object.keys(inFiles)) {\n            outputFileSync(path.join(tmpLoc, filename), inFiles[filename]);\n          }\n\n          try {\n            beforeHook(test, tmpLoc);\n\n            if (test.binLoc === undefined) {\n              throw new Error(\"test.binLoc is undefined\");\n            }\n\n            let args =\n              opts.executor && nodeGte8\n                ? [\n                    \"--require\",\n                    path.join(dirname, \"./exit-loader.cjs\"),\n                    test.binLoc,\n                  ]\n                : [test.binLoc];\n\n            args = args.concat(opts.args);\n            const env = {\n              ...process.env,\n              FORCE_COLOR: \"false\",\n              ...(parseInt(process.versions.node) >= 22 && {\n                NODE_OPTIONS: \"--disable-warning=ExperimentalWarning\",\n              }),\n              ...opts.env,\n            };\n            const child = spawn(process.execPath, args, {\n              env,\n              cwd: tmpLoc,\n              stdio:\n                (opts.executor && nodeGte8) || opts.ipc\n                  ? [\"pipe\", \"pipe\", \"pipe\", \"ipc\"]\n                  : \"pipe\",\n            });\n\n            let stderr = \"\";\n            let stdout = \"\";\n            let ipcMessage: unknown;\n\n            child.on(\"close\", function () {\n              let err;\n\n              try {\n                const result = afterHook\n                  ? afterHook(test, tmpLoc, stdout, stderr)\n                  : { stdout, stderr };\n                assertTest(\n                  result.stdout,\n                  result.stderr,\n                  ipcMessage,\n                  opts,\n                  tmpLoc,\n                );\n              } catch (e) {\n                err = e;\n              } finally {\n                try {\n                  deleteDir(tmpLoc);\n                } catch (error) {\n                  console.error(error);\n                }\n              }\n\n              if (err) {\n                err.message =\n                  args.map(arg => `\"${arg}\"`).join(\" \") + \": \" + err.message;\n              }\n\n              callback(err);\n            });\n\n            if (opts.ipc) {\n              child.on(\"message\", function (message) {\n                ipcMessage = message;\n              });\n            }\n\n            if (opts.stdin) {\n              child.stdin.write(opts.stdin);\n              child.stdin.end();\n            }\n\n            const captureOutput = (proc: ChildProcess) => {\n              proc.stderr.on(\"data\", function (chunk) {\n                stderr += chunk;\n              });\n\n              proc.stdout.on(\"data\", function (chunk) {\n                stdout += chunk;\n              });\n            };\n\n            if (opts.executor) {\n              const executor = spawn(process.execPath, [opts.executor], {\n                cwd: tmpLoc,\n              });\n\n              child.stdout.pipe(executor.stdin);\n              child.stderr.pipe(executor.stdin);\n\n              executor.on(\"close\", function () {\n                if (nodeGte8) {\n                  child.send(\"exit\");\n                } else {\n                  child.kill(\"SIGKILL\");\n                }\n              });\n\n              captureOutput(executor);\n            } else {\n              captureOutput(child);\n            }\n          } catch (e) {\n            deleteDir(tmpLoc);\n            throw e;\n          }\n        },\n      };\n      tests.push(test);\n    });\n  });\n\n  tests.sort(function (testA, testB) {\n    const nameA = testA.suiteName + \"/\" + testA.testName;\n    const nameB = testB.suiteName + \"/\" + testB.testName;\n    return nameA.localeCompare(nameB);\n  });\n\n  return tests;\n}\n"],"mappings":"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","ignoreList":[]}